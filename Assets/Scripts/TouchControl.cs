//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.1
//     from Assets/Scripts/TouchControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/TouchControl.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @TouchControl: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @TouchControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""TouchControl"",
    ""maps"": [
        {
            ""name"": ""Touches"",
            ""id"": ""fb1e1fce-9835-49ca-8e29-a5750ad9075b"",
            ""actions"": [
                {
                    ""name"": ""Touchaction"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d8ed1b3b-1dfb-4ad1-9548-a964355b5cc5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressOn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""93cfc9ef-1528-478d-9229-adecc3da9060"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touchpos"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ae3e7a82-721f-436d-9c4d-7b82bee3aea0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6336f448-1589-44c4-a024-dab44c562cf8"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Touchaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31bb6a0e-cc03-4117-b82e-50dea6f6bbd1"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""PressOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""060a639d-9e80-4191-b559-36f4b9c2bdab"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Touchpos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Touches
        m_Touches = asset.FindActionMap("Touches", throwIfNotFound: true);
        m_Touches_Touchaction = m_Touches.FindAction("Touchaction", throwIfNotFound: true);
        m_Touches_PressOn = m_Touches.FindAction("PressOn", throwIfNotFound: true);
        m_Touches_Touchpos = m_Touches.FindAction("Touchpos", throwIfNotFound: true);
    }

    ~@TouchControl()
    {
        UnityEngine.Debug.Assert(!m_Touches.enabled, "This will cause a leak and performance issues, TouchControl.Touches.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touches
    private readonly InputActionMap m_Touches;
    private List<ITouchesActions> m_TouchesActionsCallbackInterfaces = new List<ITouchesActions>();
    private readonly InputAction m_Touches_Touchaction;
    private readonly InputAction m_Touches_PressOn;
    private readonly InputAction m_Touches_Touchpos;
    /// <summary>
    /// Provides access to input actions defined in input action map "Touches".
    /// </summary>
    public struct TouchesActions
    {
        private @TouchControl m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TouchesActions(@TouchControl wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Touches/Touchaction".
        /// </summary>
        public InputAction @Touchaction => m_Wrapper.m_Touches_Touchaction;
        /// <summary>
        /// Provides access to the underlying input action "Touches/PressOn".
        /// </summary>
        public InputAction @PressOn => m_Wrapper.m_Touches_PressOn;
        /// <summary>
        /// Provides access to the underlying input action "Touches/Touchpos".
        /// </summary>
        public InputAction @Touchpos => m_Wrapper.m_Touches_Touchpos;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Touches; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TouchesActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TouchesActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TouchesActions" />
        public void AddCallbacks(ITouchesActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchesActionsCallbackInterfaces.Add(instance);
            @Touchaction.started += instance.OnTouchaction;
            @Touchaction.performed += instance.OnTouchaction;
            @Touchaction.canceled += instance.OnTouchaction;
            @PressOn.started += instance.OnPressOn;
            @PressOn.performed += instance.OnPressOn;
            @PressOn.canceled += instance.OnPressOn;
            @Touchpos.started += instance.OnTouchpos;
            @Touchpos.performed += instance.OnTouchpos;
            @Touchpos.canceled += instance.OnTouchpos;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TouchesActions" />
        private void UnregisterCallbacks(ITouchesActions instance)
        {
            @Touchaction.started -= instance.OnTouchaction;
            @Touchaction.performed -= instance.OnTouchaction;
            @Touchaction.canceled -= instance.OnTouchaction;
            @PressOn.started -= instance.OnPressOn;
            @PressOn.performed -= instance.OnPressOn;
            @PressOn.canceled -= instance.OnPressOn;
            @Touchpos.started -= instance.OnTouchpos;
            @Touchpos.performed -= instance.OnTouchpos;
            @Touchpos.canceled -= instance.OnTouchpos;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TouchesActions.UnregisterCallbacks(ITouchesActions)" />.
        /// </summary>
        /// <seealso cref="TouchesActions.UnregisterCallbacks(ITouchesActions)" />
        public void RemoveCallbacks(ITouchesActions instance)
        {
            if (m_Wrapper.m_TouchesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TouchesActions.AddCallbacks(ITouchesActions)" />
        /// <seealso cref="TouchesActions.RemoveCallbacks(ITouchesActions)" />
        /// <seealso cref="TouchesActions.UnregisterCallbacks(ITouchesActions)" />
        public void SetCallbacks(ITouchesActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TouchesActions" /> instance referencing this action map.
    /// </summary>
    public TouchesActions @Touches => new TouchesActions(this);
    private int m_TouchSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Touches" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TouchesActions.AddCallbacks(ITouchesActions)" />
    /// <seealso cref="TouchesActions.RemoveCallbacks(ITouchesActions)" />
    public interface ITouchesActions
    {
        /// <summary>
        /// Method invoked when associated input action "Touchaction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTouchaction(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PressOn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPressOn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Touchpos" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTouchpos(InputAction.CallbackContext context);
    }
}
